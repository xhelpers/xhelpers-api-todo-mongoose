# Envs from kubernetes 'configmap':
# - config map '$SERVICE_NAME-config' must be created with api envs 

# Envs from git actions using org/repo secrets:
# K8S_NAMESPACE   # myapp-ns
# SERVICE_NAME    # github project slug - "${GITHUB_REPOSITORY,,}" | tr '[:upper:]' '[:lower:]'
# IMAGE_REPO_URL  # (https://full-registry-uri/my-custom-api-registry:$ENV-$github-sha)
# SERVICE_URL     # service dns (my-custom-api.mydomain.com)

---
apiVersion: v1
kind: Namespace
metadata:
  name: $K8S_NAMESPACE

---
# deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: $K8S_NAMESPACE
  annotations:
    configmap.reloader.stakater.com/reload: "$SERVICE_NAME-config"
  labels:
    name: $SERVICE_NAME
  name: $SERVICE_NAME
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      name: $SERVICE_NAME
  template:
    metadata:
      annotations:
        configmap.reloader.stakater.com/reload: "$SERVICE_NAME-config"
      labels:
        name: $SERVICE_NAME
    spec:
      imagePullSecrets:
        - name: $SERVICE_NAME
      containers:
        - name: $SERVICE_NAME
          image: $IMAGE_REPO_URL
          imagePullPolicy: Always
          resources:
            limits:
              cpu: 50m
              memory: 150M
            requests:
              cpu: 5m
              memory: 50M
          ports:
            - containerPort: 80
          livenessProbe:
            httpGet:
              path: /health
              port: 80
              scheme: HTTP
            initialDelaySeconds: 20
            timeoutSeconds: 20
          env:
            - name: HOST
              valueFrom:
                configMapKeyRef:
                  name: $SERVICE_NAME-config
                  key: HOST
            - name: PORT
              valueFrom:
                configMapKeyRef:
                  name: $SERVICE_NAME-config
                  key: PORT
            - name: SSL
              valueFrom:
                configMapKeyRef:
                  name: $SERVICE_NAME-config
                  key: SSL
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: $SERVICE_NAME-config
                  key: NODE_ENV
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: $SERVICE_NAME-config
                  key: LOG_LEVEL
            - name: JWT_SECRET
              valueFrom:
                configMapKeyRef:
                  name: $SERVICE_NAME-config
                  key: JWT_SECRET
            - name: JWT_ISSUER
              valueFrom:
                configMapKeyRef:
                  name: $SERVICE_NAME-config
                  key: JWT_ISSUER
            - name: JWT_EXPIRE
              valueFrom:
                configMapKeyRef:
                  name: $SERVICE_NAME-config
                  key: JWT_EXPIRE   
---
# service
apiVersion: v1
kind: Service
metadata:
  namespace: $K8S_NAMESPACE
  name: $SERVICE_NAME
spec:
  ports:
    - name: http
      targetPort: 80
      port: 80
  selector:
    name: $SERVICE_NAME

---
# dns
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: $K8S_NAMESPACE
  name: $SERVICE_NAME
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    cert-manager.io/issue-temporary-certificate: "" # temporary cert required for nginx to be able to reload
    acme.cert-manager.io/http01-edit-in-place: "" # important to merge with existing ingress resource into a single nginx config file
spec:
  tls:
    - hosts:
        - $SERVICE_URL
      secretName: $SERVICE_NAME-tls
  rules:
    - host: $SERVICE_URL
      http:
        paths:
          - pathType: ImplementationSpecific
            backend:
              service:
                name: $SERVICE_NAME
                port:
                  number: 80
